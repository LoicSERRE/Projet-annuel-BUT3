{
	"info": {
		"_postman_id": "0aea9b66-979b-4c5f-a54b-12bf73cc6432",
		"name": "S5.A.01 Test d'intÃ©gration PostMan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30523697"
	},
	"item": [
		{
			"name": "Role",
			"item": [
				{
					"name": "Get Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  ",
									"  responseData.forEach(function(item){",
									"    pm.expect(item.role_id).to.exist.and.to.be.a('number');",
									"    pm.expect(item.name).to.exist.and.to.be.a('string');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"role_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (role) {",
									"        pm.expect(role.role_id).to.be.a('number').and.to.satisfy((id) => id >= 0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (role) {",
									"        pm.expect(role.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAzNjEwOTA2LCJleHAiOjE3MDM2MTgxMDZ9.AK3l3DGQ8MgxJC8bCY-6uNbfr0OlE8OWGIYKRy1Gd0o",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:3000/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"roles"
							],
							"query": [
								{
									"key": "id",
									"value": "14",
									"disabled": true
								},
								{
									"key": "name",
									"value": "guest",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"The 'stmt' field exists in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('stmt');",
									"});",
									"",
									"",
									"pm.test(\"The 'lastID' field exists in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.lastID).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'changes' field exists in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('changes');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"loic\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/roles/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"roles",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/roles/14",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"roles",
								"14"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Each user object in the array has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.user_id).to.exist.and.to.be.a('number');",
									"    pm.expect(user.username).to.exist.and.to.be.a('string');",
									"    pm.expect(user.password).to.exist.and.to.be.a('string');",
									"    pm.expect(user.role_id).to.exist.and.to.be.a('number');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "username",
									"value": "guest",
									"disabled": true
								},
								{
									"key": "role_id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.username).to.exist;",
									"  pm.expect(responseData.email).to.exist;",
									"  pm.expect(responseData.fullName).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'avatar' field is null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.avatar).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'isPublic' field is true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.isPublic).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test2\",\r\n    \"password\": \"test\",\r\n    \"role_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"plusloic\",\r\n    \"password\": \"pluschoucroute\",\r\n    \"role_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/users/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Zone",
			"item": [
				{
					"name": "Get Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the zone_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(zone) {",
									"        pm.expect(zone.zone_id).to.be.a('number');",
									"        pm.expect(zone.zone_id).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate x and y coordinates are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(zone) {",
									"        pm.expect(zone.x).to.be.a('number').and.to.be.at.least(0, \"x coordinate should be non-negative\");",
									"        pm.expect(zone.y).to.be.a('number').and.to.be.at.least(0, \"y coordinate should be non-negative\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate width and height are positive integers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(zone) {",
									"        pm.expect(zone.width).to.be.a('number').and.to.be.greaterThan(0, \"Width should be a positive integer\");",
									"        pm.expect(zone.height).to.be.a('number').and.to.be.greaterThan(0, \"Height should be a positive integer\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/zones?id=&x=&y=&width&height&nbline=&nbcolumn=&name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"zones"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "x",
									"value": ""
								},
								{
									"key": "y",
									"value": ""
								},
								{
									"key": "width",
									"value": null
								},
								{
									"key": "height",
									"value": null
								},
								{
									"key": "nbline",
									"value": ""
								},
								{
									"key": "nbcolumn",
									"value": ""
								},
								{
									"key": "name",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('stmt');",
									"    pm.expect(responseData).to.have.property('lastID');",
									"    pm.expect(responseData).to.have.property('changes');",
									"});",
									"",
									"",
									"pm.test(\"stmt is an object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.stmt).to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"lastID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.lastID).to.exist;",
									"  pm.expect(responseData.lastID).to.be.a('number');",
									"  pm.expect(responseData.lastID).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Changes is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.changes).to.be.a('number');",
									"    pm.expect(responseData.changes).to.be.at.least(0, \"Changes should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"x\": 0,\r\n    \"y\": 0,\r\n    \"width\": 0,\r\n    \"height\": 0,\r\n    \"nbline\": 0,\r\n    \"nbcolumn\": 0,\r\n    \"name\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/zones",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"zones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Zone",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"x\": 0,\r\n    \"y\": 0,\r\n    \"width\": 100,\r\n    \"height\": 200,\r\n    \"nbline\": 10,\r\n    \"nbcolumn\": 15,\r\n    \"name\": \"jesuisletestdemort\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/zones/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"zones",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Zone",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAyODMyMjE4LCJleHAiOjE3MzQzNjgyMTh9.Mgjwmcr39h7bYChG0ZHwJR5bGtQ0650Gs-74m8Sn04s",
								"description": "Token de test",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/zones/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"zones",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login and disconnect",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.refreshToken).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"RefreshToken is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.refreshToken).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disconnect",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAzNjEwOTA2LCJleHAiOjE3MDM2MTgxMDZ9.AK3l3DGQ8MgxJC8bCY-6uNbfr0OlE8OWGIYKRy1Gd0o",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-refresh-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzAzNjA3MTA1LCJleHAiOjE3MDQyMTE5MDV9.PveT_aIA0bIt5YVdWnh7nASdFWRNZvfg9taQdY36Z74",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/refreshToken",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"refreshToken"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}